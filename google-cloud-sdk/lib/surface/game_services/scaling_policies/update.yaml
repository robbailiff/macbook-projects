- release_tracks: [ALPHA]
  is_hidden: true

  help_text:
    brief: Update a Scaling Policy.
    description: Update a Cloud Game Services Scaling Policy.

  request:
    collection: gameservices.projects.locations.scalingPolicies

  arguments:
    resource:
      help_text: Cloud Game Services Scaling Policy to update.
      spec: !REF googlecloudsdk.command_lib.game_services.resources:scaling_policy

    params:
    - arg_name: priority
      api_field: scalingPolicy.priority
      help_text: |
        Priority of the Scaling Policy.
    - arg_name: deployment
      api_field: scalingPolicy.gameServerDeployment
      help_text: |
        Deployment for this Scaling Policy.
        Example:
        "projects/my-project/locations/global/gameServerDeployments/my-deployment".
    - arg_name: min-replicas
      api_field: scalingPolicy.fleetAutoscalerSettings.minReplicas
      help_text: |
        Minimum fleet size.
    - arg_name: max-replicas
      api_field: scalingPolicy.fleetAutoscalerSettings.maxReplicas
      help_text: |
        Maximum fleet size.
    - arg_name: match-clusters
      api_field: scalingPolicy.clusterSelectors.labels.additionalProperties
      metavar: KEY=VALUE
      help_text: |
        Labels to select clusters to which this Scaling Policy applies. This flag can be repeated.
        Example:
          $ {command} example-policy --match-clusters=label_a=value1,label_b=value2 \
                                     --match-clusters=label_c=value3,label_d=value4
        With the above command, this policy is applicable to clusters that have
        either label_a=value1 and label_b=value2, or label_c=value3,label_d=value4.
      type:
        arg_dict:
          flatten: true
          spec:
          - api_field: key
          - api_field: value
    - arg_name: schedule
      api_field: scalingPolicy.schedules
      help_text: |
        Event schedules. Schedules allow scaling policies to be adjusted for planned events. For
        example, you can add policies to allocate from specific clusters during an event. This flag can
        be repeated.

        The following keys are allowed:

        *cron-spec*::: Cron definition of the scheduled event. See https://en.wikipedia.org/wiki/Cron.
        The cron spec specification is in the local time as defined by the realm. Requires
        cron-job-duration to be specified.

        *cron-job-duration*::: Duration for the cron job event. The duration of the event is effective
        after the cron job's start time. See $ gcloud topic datetimes for information on
        duration formats. Required if cron-spec is specified.

        *start-time*::: Start time of the event. See $ gcloud topic datetimes for information on
        duration formats. Either start-time or cron-spec should be specified.

        *end-time*::: End time of the event. See $ gcloud topic datetimes for information on
        duration formats.

        Example:
        $ {command} example-policy --schedule=cron-spec="10 0 1-7 5,12 *",cron-job-duration=4H10M,start-time=2019-10-01T10:00,end-time=2020-10-01T10:00 \
                                   --schedule=start-time=2021-09-25
      type:
        arg_dict:
          flatten: false
          spec:
          - api_field: cronSpec
          - api_field: cronJobDuration
          - api_field: startTime
          - api_field: endTime
